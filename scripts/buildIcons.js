import fs from 'fs';
import path from 'path';
import SVGO from 'svgo';
import glob from 'glob';
import util from 'util';
import yargs from 'yargs';
import prettier from 'prettier';

const globAsync = util.promisify(glob);
const readFileAsync = util.promisify(fs.readFile);
const writeFileAsync = util.promisify(fs.writeFile);

const svgo = new SVGO({
  floatPrecision: 4,
  plugins: [
    { cleanupAttrs: true },
    { removeDoctype: true },
    { removeXMLProcInst: true },
    { removeComments: true },
    { removeMetadata: true },
    { removeTitle: true },
    { removeDesc: true },
    { removeUselessDefs: true },
    { removeXMLNS: true },
    { removeEditorsNSData: true },
    { removeEmptyAttrs: true },
    { removeHiddenElems: true },
    { removeEmptyText: true },
    { removeEmptyContainers: true },
    { removeViewBox: true },
    { cleanupEnableBackground: true },
    { minifyStyles: true },
    { convertStyleToAttrs: true },
    { convertColors: true },
    { convertPathData: true },
    { convertTransform: false },
    { removeUnknownsAndDefaults: true },
    { removeNonInheritableGroupAttrs: true },
    { removeUselessStrokeAndFill: true },
    { removeUnusedNS: true },
    { cleanupIDs: true },
    { cleanupNumericValues: true },
    { cleanupListOfValues: true },
    { moveElemsAttrsToGroup: true },
    { moveGroupAttrsToElems: true },
    { collapseGroups: true },
    { removeRasterImages: true },
    { mergePaths: true },
    { convertShapeToPath: true },
    { sortAttrs: true },
    { removeDimensions: true },
    { removeAttrs: true },
    { removeElementsByAttr: true },
    { removeStyleElement: true },
    { removeScriptElement: true },
  ],
});

const init = async ({ svgDir, outputFile, glob = '*.svg' }) => {
  try {
    const icons = await globAsync(path.join(svgDir, glob));
    const paths = {};

    console.log(`Found ${icons.length} icons`);

    for (const icon of icons) {
      const data = await readFileAsync(icon, { encoding: 'utf8' });
      const iconName = icon
        .split('/')
        .pop()
        .toLowerCase()
        .replace(' ', '_')
        .replace('.svg', '');
      const input = data
        .replace(/ fill="#ADB5BD"/g, '')
        .replace(/ fill="none"/g, '')
        .replace(/<rect(.*)rect>/g, '<rect fill="none" x="0" y="0" width="24" height="24"></rect>');

      console.log(`Optimizing ${iconName} icon...`);

      const result = await svgo.optimize(input);

      paths[iconName] = result.data
        .replace(/<svg[^>]*>/g, '')
        .replace(/<\/svg>/g, '')
        .replace(/"\/>/g, '" />')
        .replace(/fill-opacity=/g, 'fillOpacity=')
        .replace(/xlink:href=/g, 'xlinkHref=')
        .replace(/clip-rule=/g, 'clipRule=')
        .replace(/fill-rule=/g, 'fillRule=')
        .replace(/stroke-width=/g, 'strokeWidth=')
        .replace(/ clip-path=".+?"/g, '')
        .replace(/<clipPath.+?<\/clipPath>/g, '');
    }

    const template = `
      // Warning: do not edit this file manually, it is generated by a script
      // To add add or update an icon, place it in the src/icons directory and run yarn build:icons

      import React from 'react';

      export default {
        ${Object.keys(paths)
          .map(key => `${key}: (${paths[key]}),\n`)
          .join('')}
      }
    `;

    const prettierConfig = await prettier.resolveConfig(process.cwd());

    await writeFileAsync(
      outputFile,
      prettier.format(template, Object.assign(prettierConfig, { parser: 'babylon' }))
    );

    console.log('Success!');

    process.exit(0);
  } catch (e) {
    console.error(e);
    process.exit(1);
  }
};

if (require.main === module) {
  const argv = yargs
    .usage('Extract SVG paths for React Icon component.\nUsage: $0 [args]')
    .demandOption('output-file')
    .describe('output-file', 'Location of output file')
    .demandOption('svg-dir')
    .describe('svg-dir', 'SVG icon directory')
    .describe('glob', 'Glob to match inside of --svg-dir. Default *.svg').argv;

  init(argv);
}

export default init;
